extract to, archive, members... {
	logExec("tar", "--extract", "--xz", "--file", archive, "-C", to, *members)
}

function installBil(filename) {
	
	/* parse file name*/
	
	fname := basename(filename)
	fname_arr := match("(([a-zäöå][a-zäöå_\\-0-9]+)\\.("..VERSION_REGEX..")\\.bil).tar.xz", fname)
	
	if [ #fname_arr = 0 ] do
		errprint("Bil file '", fname, "' is not valid (file name is illegal).\n")
		return FALSE
	done
	
	fname_arr() | pull(fname, dname, pname, version, major, minor, patch)
	
	/* check if package is preinstalled */
	
	if isVersionInstalled(pname, version) do
		errprint("Bil '", pname, ".", version, "' is already installed.\n")
		return TRUE
	done
	
	/* extract contents */
	
	install_dir := figureOutWhereBilarAre()
	extract(install_dir, filename, dname)
	
	/* check that extraction succeeded */
	
	unless fileExists(install_dir .."/".. dname) do
		errprint("Bil file '", filename, "' is not valid ")
		errprint("(invalid directory structure or package file).\n")
		return FALSE
	done
	
	errprintUncleanState = {
		errprint("INSTALLATION DIRECTORY IS IN UNCLEAN STATE.\n")
		errprint("Remove '", install_dir, "/", dname, "' manually.")
	}
	
	/* check that package contained required files */
	
	unless [isDirectory(install_dir .."/".. dname),
		fileExists(install_dir .."/".. dname .."/init.röd"),
		isFile(install_dir .."/".. dname .."/init.röd"),
		fileExists(install_dir .."/".. dname .."/manifest.pmf"),
		isFile(install_dir .."/".. dname .."/manifest.pmf")] do
		errprint("Bil file '", filename, "' is not valid (invalid directory structure).\n")
		errprintUncleanState
		return FALSE
	done
	
	/* parse manifest */
	
	manifest := 0
	try do
		manifest = readLines(install_dir .."/".. dname .."/manifest.pmf") | parsePamflett()
	catch e
		errprint("Bil file '", filename, "' is not valid ")
		errprint("(manifest is corrupt).\n")
		return FALSE
	done
	
	errors := stream()
	found_error := validateBilManifest(manifest, errors)
	
	/* check that manifest is semantically valid */
	
	unless [ manifest["name"] = pname and manifest["version"] = version ] do
		found_error = TRUE
		errors.push("Manifest contradicts file name.\n")
	done
	
	errors.finish()
	
	/* print possible errors */
	
	if [ found_error ] do
		errprint("Bil file '", filename, "' is not valid.\n")
		errors.pullAll | errprint(it) for it
		errprintUncleanState
		return FALSE
	done
	
	/* install executables */
	
	for executable in manifest["executables"] do
		exefile := install_dir .."/".. dname .."/".. executable
		exedir := figureOutWhereBilExecutablesAre()
		
		unless [ fileExists(exefile) and isFile(exefile) ] do
			errprint("Bil file '", filename, "' is not valid.\n")
			errprint("It claims to contain the executable '"..executable.."',")
			errprint(" but that does not exist.\n")
			errprintUncleanState
			return FALSE
		done
		
		base_exe := basename(executable) /*            eg. tool.röd */
		base_exe ~= ".röd$", "" /* removes .röd suffix eg. tool     */
		
		if fileExists(exedir.."/"..base_exe) do
			/* if a more recent version is already installed, do not replace that */
			if [ bil_database[pname]? and
				compareVersions(version, bil_database[pname][0].version) <= 0 ] do
				errprint("Executable '"..executable.."' did not overwrite the current file.\n")
				continue
			else
				errprint("Executable '"..executable.."' overwrited a previous file.\n")
			done
		done
		cp exefile, exedir.."/"..base_exe
		chmod "+x", exedir.."/"..base_exe
	done if [ manifest["executables"]? ]
	
	/* check that dependencies are fulfilled */
	
	for dependency in manifest["dependencies"] do
		max_version := if [ dependency is map and dependency["max_version"]? ] do
			push(dependency["max_version"])
		else
			push("")
		done
		min_version := if [ dependency is map and dependency["min_version"]? ] do
			push(dependency["min_version"])
		else
			push("")
		done
		dep_name := if [ dependency is string ] do
			push(dependency)
		else
			push(dependency["name"])
		done
		unless isCompatibleInstalled(dep_name, min_version, max_version) do
			errprint("Bil '", pname, ".", version, "' depends on ")
			errprint("'", dep_name, "', but no compatible version is installed.\n")
		done
	done if [ manifest["executables"]? ]
	
	/* add package to the database */
	
	unless [ bil_database[pname]? ] do
		bil_database[pname] = new list<<Bil>>
	done
	bil_database[pname] += new Bil(pname, version, install_dir .."/".. dname)
	
	bil_database[pname] = [sort(bil_database[pname], cmp={ |a, b|
		return -compareVersions(a.version, b.version)
	})]
	
	saveBilDatabase(bil_database)
	
	return TRUE
}

function validateIndex(index) {
	validatePamflett index, { |it|
		it.isMap
		it.forEach { |elem|
			elem.isList
			elem.forEach { |elem|
				elem.contains "name", { |it|; it.isString }
				elem.contains "file", { |it|; it.isString }
				elem.contains "version", { |it|; it.isString }
				elem.mayContain "dependencies", { |it|
					it.isList
					it.forEach { |elem|
						elem.isStringOrMap {
							elem.contains "name", { |it|; it.isString }
							elem.mayContain "version", { |it|; it.isString }
							elem.mayContain "min_version", { |it|; it.isString }
							elem.mayContain "max_version", { |it|; it.isString }
						}
					}
				}
			}
		}
	}
}

function installBilFromInternet(bil_name, version="", min_version="", max_version="") {
	if [ (version = "" and isCompatibleInstalled(bil_name, min_version, max_version)) or
		isVersionInstalled(bil_name, version) ] do
		errprint("The requested version of '", bil_name, "' is already installed.\n")
		return TRUE
	done
	
	index_file := figureOutWhereIsBilarHome() .. "/index.pmf"
	unless fileExists(index_file) do
		errprint("Index file does not exist. Please run `bilar update`.\n")
		return FALSE
	done
	
	index := 0
	try do
		index = readLines(index_file) | parsePamflett()
	catch e
		errprint e.message, "\n"
		errprint("Index file is corrupt. Please run `bilar update`.\n")
		return FALSE
	done
	
	unless validateIndex index do
		errprint("Index file is corrupt. Please run `bilar update`.\n")
		return FALSE
	done
	
	unless [ index[bil_name]? ] do
		errprint("Bil '", bil_name, "' not found.\n")
		return FALSE
	done
	
	file := 0
	dependencies := []
	for bil in index[bil_name] do
		if [ version = "" or bil["version"] = version or
			compatible(bil["version"], min_version, max_version) ] do
			file = bil["file"]
			dependencies = bil["dependencies"] if [ bil["dependencies"]? ]
			break
		done
	done
	if [ file is integer ] do /* purkkaa */
		errprint("Bil '", bil_name, ".", version, "' not found.\n")
		return FALSE
	done
	
	for dependency in dependencies do
		if [ dependency is map ] do
			depver := push(dependency["version"]) if [ dependency["version"]? ] else push("")
			depmaxver := push(dependency["max_version"]) if [ dependency["max_version"]? ] else push("")
			depminver := push(dependency["min_version"]) if [ dependency["min_version"]? ] else push("")
			unless installBilFromInternet(dependency["name"],
				version=depver, min_version=depminver, max_version=depmaxver) do
				errprint "Failed to install a dependency. Aborting installation.\n"
				return FALSE
			done
		done
		if [ dependency is string ] do
			unless installBilFromInternet(dependency) do
				errprint "Failed to install a dependency. Aborting installation.\n"
				return FALSE
			done
		done
	done
	
	tmp_dir := figureOutWhereIsBilarHome() .. "/tmp"
	
	expectDir(tmp_dir)
	
	errprint "Downloading '", file, "'..."
	local_file := tmp_dir.."/"..basename(file)
	try do
		saveResource(file, local_file)
	catch e
		errprint " [ERROR]\n"
		errprint e.message, "\n"
		errprint "Failed to the package.\n"
		return FALSE
	done
	errprint " [DONE]\n"
	unless installBil(local_file) do
		errprint "Failed to the package.\n"
	done
	
	return TRUE
}

function searchBilFromIndex bil_name {
	index_file := figureOutWhereIsBilarHome() .. "/index.pmf"
	unless fileExists(index_file) do
		errprint("Index file does not exist. Please run `bilar update`.\n")
		return
	done
	
	index := 0
	try do
		index = readLines(index_file) | parsePamflett()
	catch e
		errprint e.message, "\n"
		errprint("Index file is corrupt. Please run `bilar update`.\n")
		return
	done
	
	unless validateIndex index do
		errprint("Index file is corrupt. Please run `bilar update`.\n")
		return
	done
	
	unless [ index[bil_name]? ] do
		errprint("Bil '", bil_name, "' not found.\n")
		return
	done
	
	for bil in index[bil_name] do
		push(bil["name"].."."..bil["version"])
	done
}

function updateIndex {
	sources_file := figureOutWhereIsBilarHome() .. "/sources.pmf"
	unless fileExists(sources_file) do
		errprint("No sources file.\n")
		return TRUE
	done
	
	sources := 0
	try do
		sources = readLines(sources_file) | parsePamflett()
	catch e
		errprint e.message, "\n"
		errprint("Sources file is corrupt.\n")
		return FALSE
	done
	
	unless validatePamflett sources, { |it|
		it.isMap
		it.contains "sources", { |it|
			it.forEach { |elem|; elem.isString }
		}
	} do
		errprint("Sources file is corrupt.\n")
		return FALSE
	done
	
	index := new map
	
	for source in sources["sources"] do
		source_index := 0
		errprint "Downloading '", source, "'..."
		try do
			source_index = loadResourceLines(source) | parsePamflett()
		catch e
			errprint " [ERROR]\n"
			errprint e.message, "\n"
			errprint("Source file is corrupt: ", source, "\n")
			return FALSE
		done
		errprint " [DONE]\n"
		unless validateIndex source_index do
			errprint("Source file is corrupt: ", source, "\n")
			return FALSE
		done
		for key in keys(source_index) do
			index[key] = [] unless [ index[key]? ]
			index[key] .= source_index[key]
		done
	done
	
	index_file := figureOutWhereIsBilarHome() .. "/index.pmf"
	
	for key in keys(index) do
		pkg_list = [sort(index[key], cmp={ |a, b|
			return -compareVersions(a["version"], b["version"])
		})]
		print "# ", key, "[]"
		for pkg in pkg_list do
			print "## bil package"
			print "### name = ", pkg["name"]
			print "### version = ", pkg["version"]
			print "### file = ", pkg["file"]
			if [ pkg["dependencies"]? ] do
				print "### dependencies[]"
				for dep in pkg["dependencies"] do
					print "#### dependency"
					if [ dep is string ] do
						print "##### name = ", dep
					else /* dep is map */
						print "##### name = ", dep["name"]
						print "##### version = ", dep["version"] if [ dep["version"]? ]
						print "##### min_version = ", dep["min_version"] if [ dep["min_version"]? ]
						print "##### max_version = ", dep["max_version"] if [ dep["max_version"]? ]
					done
				done
			done
		done
	done | writeStrings(index_file)
}
